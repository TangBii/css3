// 列1.0 公共属性
.make-grid-columns() {
  .col(@index) {
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  //.col(2,.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1)
  .col(@index, @list) when (@index =< @grid-columns) {
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  /*
  *.col(3,col-xs-1, .col-sm-1, .col-md-1, .col-lg-1,.col-xs-2, .col-sm-2, .col-md-2, .col-lg-2)
  *.col(13,
  *       ol-xs-1, .col-sm-1, .col-md-1, .col-lg-1
  *       ol-xs-2, .col-sm-2, .col-md-2, .col-lg-2
  *       ...
  *       ol-xs-12, .col-sm-12, .col-md-12, .col-lg-12
  *
  */
  .col(@index, @list) when (@index > @grid-columns) {
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  ceil((@grid-gutter-width / 2));
      padding-right: floor((@grid-gutter-width / 2));
    }
  }
  .col(1); // kickstart it
}

// 2.0
.make-grid(@class) {
  // 2.1 浮动
  .float-grid-columns(@class);
  // 2.2 width
  .loop-grid-columns(@grid-columns, @class, width);
  // 2.3 right&left
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  // 2.4  margin-left
  .loop-grid-columns(@grid-columns, @class, offset);
}

// 2.1 浮动
.float-grid-columns(@class) {
  .col(@index) {
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) {
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) {
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}

//2.2-2.3-2.4的入口
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  .loop-grid-columns((@index - 1), @class, @type);
}

// 2.2 .col-@class-12{width:12/12} .col-@class-11{width:11/12} ... .col-@class-1{width:1/12}
.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}


//2.3  .col-@{class}-pull-12{right：12/12} .col-@{class}-pull-12{right：11/12} ... .col-@{class}-pull-12{right：1/12}
//2.3  .col-@{class}-pull-0 {right:auto}
//2.3  .col-@{class}-pull-12{left：12/12} .col-@{class}-pull-12{left：11/12} ... .col-@{class}-pull-12{left：1/12}
//2.3  .col-@{class}-pull-0 {left:auto}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .col-@{class}-pull-0 {
    right: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .col-@{class}-push-0 {
    left: auto;
  }
}

//2.4 .col-@{class}-offset-12{margin-left:12/12} .col-@{class}-offset-11{margin-left:12/12} ... .col-@{class}-offset-0{margin-left:0/12}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}



